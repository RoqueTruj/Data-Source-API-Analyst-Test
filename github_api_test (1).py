# -*- coding: utf-8 -*-
"""GitHub API Test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10DF88akrbK765uiZnI8oWm3a6p4KKq2R
"""

# Paso 1: Librerías necesarias
import requests
import pandas as pd
import time

# Paso 2: Configuración del token de autenticación
GITHUB_TOKEN = "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"  # ⚠️ Reemplaza esto con tu token de GitHub
headers = {
    "Authorization": f"Bearer {GITHUB_TOKEN}",
    "X-GitHub-Api-Version": "2022-11-28",
    "Accept": "application/vnd.github+json"
}

def buscar_repositorios(query="machine learning", per_page=10):
    url = f"https://api.github.com/search/repositories?q={query}&per_page={per_page}"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        items = response.json().get('items', [])
        return pd.DataFrame([{
            "name": repo["name"],
            "owner": repo["owner"]["login"],
            "url": repo["html_url"]
        } for repo in items])
    else:
        print(f"Error {response.status_code}: {response.text}")
        return None

# Probar búsqueda
buscar_repositorios("python")

def obtener_commits(owner, repo, per_page=5):
    url = f"https://api.github.com/repos/{owner}/{repo}/commits?per_page={per_page}"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        return pd.DataFrame([{
            "sha": commit["sha"],
            "author": commit["commit"]["author"]["name"],
            "message": commit["commit"]["message"]
        } for commit in data])
    else:
        print(f"Error {response.status_code}: {response.text}")
        return None

# Ejemplo
obtener_commits("pandas-dev", "pandas")

def leer_contenido(owner, repo, path):
    url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        content = response.json()
        return content["content"]
    else:
        print(f"Error {response.status_code}: {response.text}")
        return None

# Ejemplo: Leer README.md
leer_contenido("pandas-dev", "pandas", "README.md")

def checar_limite():
    url = "https://api.github.com/rate_limit"
    response = requests.get(url, headers=headers)
    data = response.json()
    core = data['rate']
    print(f"Peticiones restantes: {core['remaining']} de {core['limit']}")
    print(f"Se reinicia en: {core['reset']} (epoch time)")